# -*- coding: utf-8 -*-
"""
Created on Thu Sep 29 11:14:23 2016

@author: avandenbroucke
"""
from scipy.signal import hilbert
import numpy as np
from ..ReadEchoFiles import ReadCSV
from ..ToolBox import SimpleTools
import peakutils
import pandas
import os
import matplotlib.pyplot as plt
 
def extractpeaks(wav, thresh=0.1,  start=1500, stop=3000, min_dist=10):
    """ Find BB and TB in a waveform:
      -- wav     :: waveform as np.array
      -- thresh  :: peaks below this value are discarded
      -- start   :: start index of feature extraction
      -- stop    :: stop index of feature extraction
      -- min_dst :: minimum distance betwee peaks
      Retruns a dictionary  with TB and BB index and amplitude
    """
    hw = np.abs(hilbert(wav))
    #ind = find_peaks_cwt(np.abs(hw[start:stop]),np.arange(1,20)); len(ind)
    ind = peakutils.indexes(np.abs(hw[start:stop]), thres=0.02/np.max(np.abs(hw[start:stop])), min_dist=min_dist);
    if (len(ind) < 3) :
        print(' *** ERROR **** -- not enough peaks found ')
    alld = []
    for i in ind:
        if np.abs(hw[start+i]) >  thresh :
            alld.append([ i,  start+i, np.abs(hw[start+i])])   
    alld_t = filterthickness(alld)
    features = {}
    if len(alld_t) > 1:
        features['BBInd'] = alld_t[0][1]
        features['BBAmp'] = alld_t[0][2]
        alld_np = np.array(alld_t[1:]) 
        alld_np.view('f8,f8,f8').sort(order=['f2'],axis=0)
        # take the largest feature within the thickness range
        TB = alld_np[-1]
        features['TBInd'] = TB[1]
        features['TBAmp'] = TB[2]
    return features  


def filterthickness(features, minthick=500e-9, maxthick=850e-9, samplerate=200e6):
    """ Helper function to discards peaks close (in time) to BB 
         -- features : list of identified peaks
         -- minthick, maxthick : min and max time (in sec) for TB to occur after BB
         -- samplerate : Sample rate in Hz
        Returns a list of filtered peaks
    """
    mininddelta = minthick*samplerate
    maxinddelta = maxthick*samplerate
    bbindex = features[0][0]
    alld = [features[0]]
    for i in range(1, len(features)):
        if (( (features[i][0]-bbindex) < mininddelta) or (features[i][0]-bbindex) > maxinddelta):
            continue
        else:
            alld.append(features[i])
    return alld
 
def processlist(rlist):
    """ Process filelist. Extracts features and returns a list of dict entries """
    allf = []
    for i in range(0,len(rlist)):
        wavL = getWav(rlist[i])       
        F = extractpeaks(wavL)
        allf.append(F)
        if  (( (i+1)%100 == 0 ) and (i> 0)):
            print( i+1, '/', len(rlist), ' files processed')
    return allf

def processfolder():
    """ Process folder of NGT collected signal data 
        Graphs histograms of BB and TB index and amplitude     
    """
    rawlist = SimpleTools.getFileList('*raw*csv')
    A = processlist(rawlist)
    pdA = pandas.DataFrame(A)
    file = os.path.basename(os.getcwd())
    fig, ax = plt.subplots(ncols=2, nrows=2, figsize=(12,12));pdA.hist(ax=ax); plt.savefig(file +'.png')
    pdA.to_pickle(file + '.pkl')
    pdA.describe().to_csv(file + '.csv')
    return pdA
      
      
def processwav2(index=0):
    """ Helper function for debugging """
    rawlist = SimpleTools.getFileList('*raw*csv')
    wavL = getWav(rawlist[index])
    hw = hilbert(wavL)
    ind = peakutils.indexes(np.abs(hw[1500:2500]), thres=0.02/np.max(np.abs(hw[1500:2500])), min_dist=10);
    for i in ind:
       print( ' i = ' , 1500+i, 'v = ', np.abs(hw[1500+i]))
    alld = []
    for i in ind:
        if np.abs(hw[1500+i]) > 0.08 :
            alld.append([ i,  1500+i, np.abs(hw[1500+i])])
    fig,ax = plt.subplots(); plt.plot(wavL); plt.plot(np.abs(hw)); ax.set_xlim(1500,2500);ax.set_ylim(-1,1)
    return alld     
    
def getWav(file, key='Frame0'):
    """ reads file generated by Core and returns the data as a list 
     -- file : filename
     -- key : key can be 'Frame0' or 'HilbertEnvelope0' for example
     """
    r = ReadCSV.readCSV(file,True)
    wavL = [ float(l[key])/1000 for l in r ]
    return wavL
    